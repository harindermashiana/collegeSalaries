[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Where it pays to attend College",
    "section": "",
    "text": "1 Introduction"
  },
  {
    "objectID": "index.html#title-where-it-pays-to-attend-college",
    "href": "index.html#title-where-it-pays-to-attend-college",
    "title": "Where it pays to attend College",
    "section": "1.1 Title: Where it Pays to Attend College",
    "text": "1.1 Title: Where it Pays to Attend College\nWe chose to study college major choice and post-graduation salaries because it is an important decision that shapes career trajectories for millions of students each year. The three datasets on undergraduate salaries provide a wealth of insights into how expected compensation varies across areas of study, college types, and geographic regions.\nFor high schoolers debating what to study or where to attend college, few factors matter more than potential return on investment. Students and families have a right to understand how choices of major and college may impact future earnings and career options after graduation. However, quality data on long-term outcomes remains frustratingly opaque at many educational institutions.\nBy integrating data on starting and mid-career salaries by major, college type, and state, my analysis aims to uncover key insights like:\n\nWhich majors provide the highest average salaries post-graduation? How much do the top majors outearn the lowest paying majors?\nDoes the earnings boost from certain elite colleges justify their high tuition prices? Or are public colleges in students’ home states the better bargain?\nHow does expected pay from the same major differ across geographic regions? How much of an advantage exists from studying or working in a major city?\nFor a given target salary level, what combinations of major and college type are most promising? What pathways are riskier from an ROI standpoint?\n\nThis data allows applicants to look beyond simplistic rankings and assess how academic decisions may impact their career and earning potential. By arming students and families with detailed salary outcomes, colleges can also be held more accountable for the return they provide on expensive four-year investments. Ultimately the goal is to bring greater transparency that promotes affordable degrees and careers aligned to student interests and strengths."
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "3 State name\nCode\n# Install and load required libraries\n#install.packages(c(\"rvest\", \"tidyverse\", \"httr\"))\nlibrary(rvest)\n\n\n\nAttaching package: 'rvest'\n\n\nThe following object is masked from 'package:readr':\n\n    guess_encoding\n\n\nCode\nlibrary(tidyverse)\nlibrary(httr)\n\n# Function to get state from university name\nget_state_from_university &lt;- function(university_name) {\n  # Construct the search URL\n  base_url &lt;- \"https://www.example.com\"  # Replace with the actual URL you want to use\n  search_url &lt;- paste0(base_url, \"/search?q=\", URLencode(university_name))\n\n  # Send HTTP request and retrieve content\n  response &lt;- GET(search_url)\n  content &lt;- content(response, \"text\")\n\n  # Parse HTML content\n  page &lt;- read_html(content)\n\n  # Extract state information (modify the selector based on the actual HTML structure)\n  state &lt;- page %&gt;%\n    html_nodes(\"your_selector_here\") %&gt;%\n    html_text() %&gt;%\n    str_trim()\n\n  return(state)\n}\n\n# Example usage\nuniversity_name &lt;- \"Harvard University\"  # Replace with the actual university name\nstate &lt;- get_state_from_university(university_name)\n\n# Print the result\ncat(\"The state for\", university_name, \"is:\", state, \"\\n\")\n\n\nThe state for Harvard University is:\nCode\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(gridExtra)\n\n\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\n\nCode\n# Replace 'your_file_path.csv' with the actual path to your CSV file\ndata &lt;- read.csv(\"data/degrees-that-pay-back.csv\")\n\n# Convert median salary column to numeric (remove '$' and ',' if present)\ndata$Smedian_salary &lt;- as.numeric(gsub(\"[$,]\", \"\", data$Starting.Median.Salary))\ndata$Mmedian_salary &lt;- as.numeric(gsub(\"[$,]\", \"\", data$Mid.Career.Median.Salary))\nCode\ndata = na.omit(data)\n\ntop_10 &lt;- head(data[order(data$Smedian_salary, decreasing = TRUE), ], 10)\nbottom_10 &lt;- head(data[order(data$Smedian_salary), ], 10)\n\ntop_10$category = \"Top\"\nbottom_10$category = \"Bottom\"\n\ntotal = rbind(top_10,bottom_10)\n# Plot top 10 majors\nstarting_plot = ggplot(total, aes(x = reorder(Undergraduate.Major, -Smedian_salary), y = Smedian_salary)) +\n  geom_bar(stat = \"identity\", aes(fill = category)) +\n  labs(title = \"Top 10 and Bottom 10 Majors - Starting Median Salary\",\n       x = \"Major Name\",\n       y = \"Median Salary ($)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1),\n        legend.position = \"none\")+\n  ylim(0,110000)\n\ntop_10 &lt;- head(data[order(data$Mmedian_salary, decreasing = TRUE), ], 10)\nbottom_10 &lt;- head(data[order(data$Mmedian_salary), ], 10)\n\ntop_10$category = \"Top\"\nbottom_10$category = \"Bottom\"\n\ntotal = rbind(top_10,bottom_10)\n\ntotal$Mmedian_slary = as.numeric(total$Mmedian_salary)\n\n# Plot top 10 majors\nmid_plot = ggplot(total, aes(x = reorder(Undergraduate.Major, -Mmedian_salary), y = Mmedian_salary)) +\n  geom_bar(stat = \"identity\", aes(fill = category)) +\n  labs(title = \"Top 10 and Bottom 10 Majors - Mid Career Median Salary\",\n       x = \"Major Name\",\n       y = NULL) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))+\n  ylim(0,110000)\n\ngrid.arrange(starting_plot, mid_plot, ncol = 2)\nCode\n# Find top 10 majors based on highest median salaries\ndata$Percent.change.from.Starting.to.Mid.Career.Salary &lt;- as.numeric(data$Percent.change.from.Starting.to.Mid.Career.Salary)\n\ntop_10_median &lt;- head(data[order(data$Starting.Median.Salary, decreasing = TRUE), ], 10)\n\n# Find top 10 majors based on highest percentage change\ntop_10_percentage_change &lt;- head(data[order(data$Percent.change.from.Starting.to.Mid.Career.Salary, decreasing = TRUE), ], 10)\ntop_10_percentage_change$Mmedian_salary &lt;- as.numeric(gsub(\"[$,]\", \"\", top_10_percentage_change$Mid.Career.Median.Salary))\n# Plot line plot for the top 10 majors with highest median salaries\n\n\n# ggplot(top_10_median, aes(x = reorder(Undergraduate.Major,Starting.Median.Salary), y = Starting.Median.Salary, group = 1)) +\n#   geom_line() +\n#   labs(title = \"Top 10 Majors based on Highest Median Salaries\",\n#        x = \"Undergraduate Major\",\n#        y = \"Starting Median Salary ($)\") +\n#   theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n# Plot line plot for the top 10 majors with highest percentage change\n# ggplot(top_10_percentage_change, aes(x = reorder(Undergraduate.Major,Percent.change.from.Starting.to.Mid.Career.Salary), y = Percent.change.from.Starting.to.Mid.Career.Salary, group = 1)) +\n#   geom_line() +\n#   geom_point(aes(y=Mmedian_salary))+\n#   labs(title = \"Top 10 Majors based on Highest Percentage Change\",\n#        x = \"Undergraduate Major\",\n#        y = \"Percentage Change (%)\") +\n#   theme(axis.text.x = element_text(angle = 45, hjust = 1))\n# scale_factor = 0.001\n# \n# ggplot(top_10_percentage_change, aes(x = reorder(Undergraduate.Major, Percent.change.from.Starting.to.Mid.Career.Salary))) +\n#   geom_line(aes(y = Percent.change.from.Starting.to.Mid.Career.Salary, color = \"y1\"), size = 1.5) +\n#   geom_line(aes(y = Mmedian_salary * 10, color = \"y2\"), size = 1.5) +\n#   scale_y_continuous(name = \"y1\", sec.axis = sec_axis(~./10, name = \"y2\")) +\n#   labs(title = \"Line Plot with Two Y-Axes\",\n#        x = \"X-axis\",\n#        y = \"Primary Y-axis\") +\n#   theme_minimal()\nCode\n# \n# library(ggplot2)\n# library(maps)\n# library(dplyr)\n# \n# # Read in data\n# df = read.csv('data/salary_potential.csv')\n# \n# # Summarize count for each state\n# state_count = df %&gt;% \n#   group_by(state) %&gt;%\n#   summarize(count = n())\n# state_count = na.omit(state_count)\n# state_count$state &lt;- tolower(state_count$state)\n# # Plot\n# ggplot(data = state_count, aes(map_id = state)) + \n#   geom_map(aes(fill  = count), map = map_data(\"state\")) +\n#   expand_limits(x = map_data(\"state\")$long,\n#                 y = map_data(\"state\")$lat) + \n#   labs(title=\"US Map Plotted from CSV Data\") +\n#   theme_void()\nCode\nlibrary(ggplot2)\nlibrary(maps)\n\n\n\nAttaching package: 'maps'\n\n\nThe following object is masked from 'package:viridis':\n\n    unemp\n\n\nThe following object is masked from 'package:purrr':\n\n    map\n\n\nCode\nlibrary(dplyr)\n\n# Read in data\ndf = read.csv('data/degrees-that-pay-back.csv')\n\ndf$Starting.Median.Salary &lt;- as.numeric(gsub(\"[$,]\", \"\", df$Starting.Median.Salary))\ndf$Mid.Career.Median.Salary &lt;- as.numeric(gsub(\"[$,]\", \"\", df$Mid.Career.Median.Salary))\ndf$Percent.change.from.Starting.to.Mid.Career.Salary &lt;- as.numeric(gsub(\"[$,]\", \"\", df$Percent.change.from.Starting.to.Mid.Career.Salary))\n\n\n#df = na.omit(df)\n# df = drop_na(df,state_name)\n# df$state_name &lt;- tolower(df$state_name)\n# \n# # Plot\n# ggplot(data = df, aes(map_id = state_name)) + \n#   geom_map(aes(fill  = early_career_pay), map = map_data(\"state\")) +\n#   expand_limits(x = map_data(\"state\")$long,\n#                 y = map_data(\"state\")$lat) + \n#   labs(title=\"US Map Plotted from CSV Data\") +\n#   theme_void()\nCode\n# Assuming your dataframe is named 'your_dataframe' and you want to sort by the column 'your_column'\ndf &lt;- df[order(df$Percent.change.from.Starting.to.Mid.Career.Salary, decreasing = TRUE), ]\n\n# Get the top 10 rows\ntop_10_values &lt;- df[1:10, ]\ntop_10_values\n\n\n       Undergraduate.Major Starting.Median.Salary Mid.Career.Median.Salary\n38                    Math                  45400                    92400\n43              Philosophy                  39900                    81200\n34 International Relations                  40900                    80900\n18               Economics                  50100                    98600\n37               Marketing                  40800                    79600\n45                 Physics                  50300                    97300\n46       Political Science                  40800                    78200\n10               Chemistry                  42600                    79900\n35              Journalism                  35600                    66700\n5             Architecture                  41600                    76800\n   Percent.change.from.Starting.to.Mid.Career.Salary\n38                                             103.5\n43                                             103.5\n34                                              97.8\n18                                              96.8\n37                                              95.1\n45                                              93.4\n46                                              91.7\n10                                              87.6\n35                                              87.4\n5                                               84.6\n   Mid.Career.10th.Percentile.Salary Mid.Career.25th.Percentile.Salary\n38                        $45,200.00                        $64,200.00\n43                        $35,500.00                        $52,800.00\n34                        $38,200.00                        $56,000.00\n18                        $50,600.00                        $70,600.00\n37                        $42,100.00                        $55,600.00\n45                        $56,000.00                        $74,200.00\n46                        $41,200.00                        $55,300.00\n10                        $45,300.00                        $60,700.00\n35                        $38,400.00                        $48,300.00\n5                         $50,600.00                        $62,200.00\n   Mid.Career.75th.Percentile.Salary Mid.Career.90th.Percentile.Salary\n38                       $128,000.00                       $183,000.00\n43                       $127,000.00                       $168,000.00\n34                       $111,000.00                       $157,000.00\n18                       $145,000.00                       $210,000.00\n37                       $119,000.00                       $175,000.00\n45                       $132,000.00                       $178,000.00\n46                       $114,000.00                       $168,000.00\n10                       $108,000.00                       $148,000.00\n35                        $97,700.00                       $145,000.00\n5                         $97,000.00                       $136,000.00"
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "2.1 Description",
    "text": "2.1 Description"
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nfile1 &lt;- read.csv(\"data/degrees-that-pay-back.csv\")\nfile2 &lt;- read.csv(\"data/salaries-by-college-type.csv\")\nfile3 &lt;- read.csv(\"data/salaries-by-region.csv\")\n\n# Assuming your data frame is named df\n# Replace \"N/A\" with NA in the entire data frame\nfile1 &lt;- file1 %&gt;% mutate_all(~ ifelse(. == \"N/A\", NA, .))\nfile2 &lt;- file2 %&gt;% mutate_all(~ ifelse(. == \"N/A\", NA, .))\nfile3 &lt;- file3 %&gt;% mutate_all(~ ifelse(. == \"N/A\", NA, .))\n\nmissing_percentage_file1 &lt;- colMeans(is.na(file1)) * 100\nmissing_percentage_file2 &lt;- colMeans(is.na(file2)) * 100\nmissing_percentage_file3 &lt;- colMeans(is.na(file3)) * 100\n\ndf_file1 &lt;- data.frame(Column = names(file1), Missing_Percentage = missing_percentage_file1)\ndf_file2 &lt;- data.frame(Column = names(file2), Missing_Percentage = missing_percentage_file2)\ndf_file3 &lt;- data.frame(Column = names(file3), Missing_Percentage = missing_percentage_file3)\n\ncombined_df &lt;- bind_rows(\n  mutate(df_file1, File = \"File 1\"),\n  mutate(df_file2, File = \"File 2\"),\n  mutate(df_file3, File = \"File 3\")\n)\n\nggplot(combined_df, aes(x = Column, y = Missing_Percentage, fill = File)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Percentage of Missing Values in Each Column\",\n       x = \"Column\",\n       y = \"Missing Percentage\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\nCode\n# Install required packages\n# Install and load necessary packages\n#install.packages(c(\"tidyverse\", \"viridis\"))\nlibrary(tidyverse)\nlibrary(viridis)\n\n\nLoading required package: viridisLite\n\n\nCode\nlibrary(reshape2)\n\n\n\nAttaching package: 'reshape2'\n\n\nThe following object is masked from 'package:tidyr':\n\n    smiths\n\n\nCode\n# Define function to load CSV files with 'N/A' as missing values\ndf1 &lt;- read.csv(\"data/salaries-by-college-type.csv\", na.strings = \"N/A\")\ndf2 &lt;- read.csv(\"data/salaries-by-region.csv\", na.strings = \"N/A\")\n\n# Function to plot missing values\nplot_missing_values &lt;- function(df, title) {\n  df %&gt;%\n    is.na() %&gt;%\n    melt() %&gt;%\n    ggplot(aes(x = Var2, y = Var1, fill = factor(value, labels = c(\"Present\", \"Missing\")))) +\n    geom_tile(color = \"white\") +\n    scale_fill_manual(values = c(\"Present\" = \"Green\", \"Missing\" = \"Red\")) +\n    labs(title = title, x = \"Columns\", y = \"Rows\") +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))+\n    guides(fill = guide_legend(title = \"Values\"))\n}\n\n# Plot missing values for each column in the first CSV file\nplot_missing_values(df1, \"Missing Values in File 1\")\n\n\n\n\n\nCode\n# Plot missing values for each column in the second CSV file\nplot_missing_values(df2, \"Missing Values in File 2\")"
  },
  {
    "objectID": "d3graph.html",
    "href": "d3graph.html",
    "title": "4  Interactive graph",
    "section": "",
    "text": "Select the appropriate category to display the top 10 majors.\n\nBy Starting Median Salary By Mid Career Median Salary By Percent Change Start-Mid Career Salary"
  }
]